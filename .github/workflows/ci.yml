name: MySQL Practice CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: practice_db
          MYSQL_USER: practice_user
          MYSQL_PASSWORD: practice_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install code quality tools
      run: |
        pip install pytest pytest-cov flake8 mypy black isort --no-deps --disable-pip-version-check
      continue-on-error: true  # Don't fail if optional tools can't be installed
    
    - name: Wait for MySQL
      run: |
        echo "Waiting for MySQL to be ready..."
        for i in {1..30}; do
          if mysqladmin ping -h"127.0.0.1" -uroot -proot --silent; then
            echo "âœ… MySQL is ready"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done
        
        # Double-check MySQL status
        mysqladmin ping -h"127.0.0.1" -uroot -proot
        mysql -h"127.0.0.1" -uroot -proot -e "SHOW DATABASES;" | grep practice_db || echo "practice_db not found"
    
    - name: Set up environment
      run: |
        cp .env.example .env
        sed -i 's/DB_HOST=mysql/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_USER=practice_user/DB_USER=root/' .env
        sed -i 's/DB_PASSWORD=practice_password/DB_PASSWORD=root/' .env
    
    - name: Setup database
      run: |
        python create_database.py
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --exclude=.venv,__pycache__,.git,venv,env,node_modules --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --exclude=.venv,__pycache__,.git,venv,env,node_modules --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check formatting with black
      run: |
        if python -m black --version >/dev/null 2>&1; then
          echo "Running Black formatter check..."
          python -m black --check --diff . --exclude="/(\.venv|__pycache__|\.git|venv|env|node_modules)/" || echo "Black formatting issues found (non-blocking)"
        else
          echo "Black not available, skipping formatting check"
        fi
      continue-on-error: true  # Don't fail on formatting issues
    
    - name: Check import sorting with isort
      run: |
        if python -m isort --version >/dev/null 2>&1; then
          echo "Running isort import check..."
          python -m isort --check-only --diff . --skip-glob="*/.venv/*" --skip-glob="*/__pycache__/*" || echo "Import sorting issues found (non-blocking)"
        else
          echo "isort not available, skipping import check"
        fi
      continue-on-error: true  # Don't fail on import sorting issues
    
    - name: Type check with mypy
      run: |
        if python -m mypy --version >/dev/null 2>&1; then
          echo "Running mypy type checking..."
          python -m mypy --ignore-missing-imports . || echo "Type checking issues found (non-blocking)"
        else
          echo "mypy not available, skipping type check"
        fi
      continue-on-error: true  # Don't fail on type errors
    
    - name: Test with pytest
      env:
        GITHUB_ACTIONS: true
        DB_HOST: 127.0.0.1
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: practice_db
        DB_PORT: 3306
      run: |
        echo "Testing database connection before pytest..."
        python -c "
        from tests.test_config import is_database_available, get_test_db_config
        config = get_test_db_config()
        print(f'Database config: {config}')
        available = is_database_available()
        print(f'Database available: {available}')
        if not available:
            print('Database not available - pytest may fail')
            exit(1)
        "
        echo "Database check passed, running pytest..."
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: practice_db
          MYSQL_USER: practice_user
          MYSQL_PASSWORD: practice_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" --silent; do
            sleep 1
        done
    
    - name: Set up environment
      run: |
        cp .env.example .env
        sed -i 's/DB_HOST=mysql/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_USER=practice_user/DB_USER=root/' .env
        sed -i 's/DB_PASSWORD=practice_password/DB_PASSWORD=root/' .env
    
    - name: Run full learning path
      run: |
        bash run_learning_path.sh
    
    - name: Test CLI tool
      run: |
        python cli.py setup
        python cli.py examples --type basic
        python cli.py exercises --level beginner

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t mysql-practice .
    
    - name: Test Docker Compose
      run: |
        docker-compose up -d mysql
        sleep 30  # Wait for MySQL to be ready
        docker-compose run --rm python-app python create_database.py
        docker-compose down
